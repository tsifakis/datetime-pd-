import os
import pywt
import nolds
import numpy as np
import pandas as pd
import pmdarima as pm
import matplotlib.pyplot as plt
import statsmodels.api as sm

from sklearn.model_selection       import train_test_split
from sklearn.metrics               import mean_squared_error

from statsmodels.tsa.seasonal      import STL
from statsmodels.tsa.seasonal      import seasonal_decompose
from statsmodels.stats.diagnostic  import acorr_ljungbox

from pyentrp  import entropy as ent
from colorama import Fore, Style

seed_value = 1
np.random.seed(seed_value)
np.set_printoptions(precision=2, suppress=True)

data = [0.04, 0.08, 0.09, 0.03, 0.1, 0.08, 0.01, 0.06, 0.03, 0.07, 0.1, 0.07, 0.1, 0.05, 0.08, 0.01, 0.06, 0.03, 0.05, 0.05, 0.08, 0.01, 0.07, 0.05, 0.02, 0.04, 0.08, 0.09, 0.01, 0.03, 0.1, 0.01, 0.06, 0.02, 0.1, 0.09, 0.08, 0.07, 0.02, 0.1, 0.05, 0.02, 0.03, 0.06, 0.09, 0.08, 0.1, 0.01, 0.07, 0.02, 0.02, 0.07, 0.06, 0.05, 0.08, 0.03, 0.08, 0.01, 0.08, 0.01, 0.06, 0.06, 0.09, 0.01, 0.1, 0.05, 0.02, 0.04, 0.06, 0.1, 0.08, 0.03, 0.04, 0.07, 0.01, 0.1, 0.05, 0.1, 0.06, 0.1, 0.08, 0.07, 0.06, 0.03, 0.04, 0.05, 0.02, 0.08, 0.05, 0.02, 0.03, 0.01, 0.08, 0.01, 0.01, 0.03, 0.06, 0.02, 0.08, 0.09, 0.02, 0.03, 0.07, 0.02, 0.02, 0.08, 0.08, 0.05, 0.02, 0.01, 0.09, 0.04, 0.08, 0.07, 0.08, 0.05, 0.1, 0.1, 0.04, 0.04, 0.02, 0.1, 0.08, 0.04, 0.05, 0.04, 0.1, 0.06, 0.02, 0.07, 0.07, 0.04, 0.05, 0.01, 0.1, 0.02, 0.04, 0.01, 0.03, 0.02, 0.08, 0.05, 0.1, 0.09, 0.08, 0.03, 0.07, 0.01, 0.01, 0.04, 0.07, 0.06, 0.07, 0.03, 0.01, 0.05, 0.02, 0.06, 0.08, 0.02, 0.09, 0.03, 0.06, 0.08, 0.08, 0.01, 0.03, 0.02, 0.05, 0.02, 0.06, 0.03, 0.1, 0.01, 0.09, 0.07, 0.01, 0.08, 0.09, 0.09, 0.02, 0.01, 0.05, 0.05, 0.09, 0.06, 0.04, 0.06, 0.03, 0.01, 0.1, 0.1, 0.01, 0.06, 0.06, 0.1, 0.1, 0.1, 0.01, 0.06, 0.09, 0.04, 0.08, 0.09, 0.01, 0.03, 0.01, 0.1, 0.04, 0.06, 0.08, 0.1, 0.01, 0.1, 0.06, 0.04, 0.05, 0.04, 0.01, 0.09, 0.07, 0.04, 0.05, 0.01, 0.09, 0.01, 0.05, 0.09, 0.07, 0.05, 0.02, 0.01, 0.08, 0.09, 0.02, 0.03, 0.03, 0.06, 0.1, 0.08, 0.05, 0.09, 0.07, 0.06, 0.04, 0.07, 0.01, 0.1, 0.02, 0.03, 0.03, 0.08, 0.02, 0.09, 0.1, 0.06, 0.05, 0.06, 0.05, 0.02, 0.08, 0.08, 0.09, 0.07, 0.03, 0.09, 0.02, 0.06, 0.02, 0.06, 0.1, 0.09, 0.08, 0.04, 0.06, 0.06, 0.1, 0.02, 0.04, 0.02, 0.07, 0.02, 0.08, 0.08, 0.1, 0.09, 0.06, 0.1, 0.08, 0.08, 0.06, 0.06, 0.05, 0.03, 0.04, 0.04, 0.06, 0.08, 0.07, 0.07, 0.05, 0.07, 0.09, 0.05, 0.05, 0.01, 0.04, 0.06, 0.04, 0.04, 0.04, 0.1, 0.04, 0.01, 0.1, 0.06, 0.08, 0.06, 0.1, 0.07, 0.01, 0.04, 0.1, 0.08, 0.08, 0.01, 0.09, 0.1, 0.06, 0.03, 0.04, 0.06, 0.02, 0.03, 0.08, 0.02, 0.07, 0.08, 0.08, 0.09, 0.1, 0.07, 0.08, 0.01, 0.07, 0.06, 0.01, 0.03, 0.02, 0.01, 0.03, 0.1, 0.07, 0.02, 0.02, 0.01, 0.03, 0.04, 0.04, 0.07, 0.05, 0.02, 0.1, 0.08, 0.04, 0.1, 0.01, 0.04, 0.08, 0.08, 0.07, 0.01, 0.03, 0.1, 0.03, 0.05, 0.01, 0.04, 0.03, 0.03, 0.05, 0.1, 0.09, 0.01]

def create_datetime_index(start_date, num_days):
    all_times = []
    current_date = pd.to_datetime(start_date)
    for _ in range(num_days):
        daily_times = pd.date_range(start=current_date.strftime('%Y-%m-%d 08:00'), end=current_date.strftime('%Y-%m-%d 23:55'), freq='5min')
        all_times.append(daily_times)
        current_date += pd.DateOffset(days=1)
    return np.concatenate(all_times)

start_date = '2024-01-01'
num_days = 2
all_times = create_datetime_index(start_date, num_days)

if len(data) != len(all_times):
    raise ValueError("Το μήκος των δεδομένων δεν είναι επαρκές για τον αριθμό των χρονικών σφραγίδων που δημιουργήθηκαν.")

df = pd.DataFrame({
    'Timestamp': all_times,
    'Measurement': data
})
df.set_index('Timestamp', inplace=True)

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 400)

print(df)

basic_stats = df['Measurement'].describe()
print(f"\nΒασικά Στατιστικά Μεγέθη:")
print(basic_stats)

print(f"\nΠεραιτέρω Στατιστικά Μεγέθη:")
print(f"Εύρος τιμών: {df['Measurement'].max() - df['Measurement'].min()}")
print(f"Ποσοστό 25%: {df['Measurement'].quantile(0.25)}")
print(f"Ποσοστό 75%: {df['Measurement'].quantile(0.75)}")

plt.figure(figsize=(16, 8))
plt.plot(df.index, df['Measurement'], marker='o', linestyle='-', markersize=2)
plt.title('Θερμοκρασία Μηχανής Κατά τη Διάρκεια της Ημέρας')
plt.xlabel('Ώρα')
plt.ylabel('Θερμοκρασία (σε βαθμούς)')
plt.grid(True)
plt.show()

decomposition = sm.tsa.seasonal_decompose(df['Measurement'], model='additive', period=192)
trend = decomposition.trend.dropna()
seasonal = decomposition.seasonal
residual = decomposition.resid.dropna()

print(f"\n{Fore.RED}Trend Component decomposition:{Style.RESET_ALL}")
print(decomposition.trend)
print(f"\n{Fore.RED}Seasonal Component decomposition:{Style.RESET_ALL}")
print(decomposition.seasonal)
print(f"\n{Fore.RED}Residual Component decomposition:{Style.RESET_ALL}")
print(decomposition.resid)

def plot_component(comp, title, ylabel):
    plt.figure(figsize=(10, 4))
    plt.plot(comp)
    plt.title(title)
    plt.xlabel('Ώρα')
    plt.ylabel(ylabel)
    plt.grid(True)
    plt.show()
    print(f"{title} - Βασικά Στατιστικά Μεγέθη:")
    print(comp.describe())
    print("\n")

plot_component(trend, 'Τάση Θερμοκρασίας', 'Θερμοκρασία')
plot_component(seasonal, 'Εποχικότητα Θερμοκρασίας', 'Θερμοκρασία')
plot_component(residual, 'Τυχαιότητα Θερμοκρασίας', 'Θερμοκρασία')

decomposition = sm.tsa.seasonal_decompose(df['Measurement'], model='multiplicative', period=192)
trend = decomposition.trend.dropna()
seasonal = decomposition.seasonal
residual = decomposition.resid.dropna()

print(f"\n{Fore.YELLOW}Trend Component multiplicative:{Style.RESET_ALL}")
print(decomposition.trend)
print(f"\n{Fore.YELLOW}Seasonal Component multiplicative:{Style.RESET_ALL}")
print(decomposition.seasonal)
print(f"\n{Fore.YELLOW}Residual Component multiplicative:{Style.RESET_ALL}")
print(decomposition.resid)

def plot_component(comp, title, ylabel):
    plt.figure(figsize=(10, 4))
    plt.plot(comp)
    plt.title(title)
    plt.xlabel('Ώρα')
    plt.ylabel(ylabel)
    plt.grid(True)
    plt.show()
    print(f"{title} - Βασικά Στατιστικά Μεγέθη:")
    print(comp.describe())
    print("\n")

plot_component(trend, 'Τάση Θερμοκρασίας', 'Θερμοκρασία')
plot_component(seasonal, 'Εποχικότητα Θερμοκρασίας', 'Θερμοκρασία')
plot_component(residual, 'Τυχαιότητα Θερμοκρασίας', 'Θερμοκρασία')

stl = STL(df['Measurement'], period=192)
result = stl.fit()
trend = result.trend
seasonal = result.seasonal
residual = result.resid

print(f"\n{Fore.MAGENTA}Trend Component stl:{Style.RESET_ALL}")
print(result.trend)
print(f"\n{Fore.MAGENTA}Seasonal Component stl:{Style.RESET_ALL}")
print(result.seasonal)
print(f"\n{Fore.MAGENTA}Residual Component stl:{Style.RESET_ALL}")
print(result.resid)
result.plot()
plt.show()

data = [0.04, 0.08, 0.09, 0.03, 0.1, 0.08, 0.01, 0.06, 0.03, 0.07, 0.1, 0.07, 0.1, 0.05, 0.08, 0.01, 0.06, 0.03, 0.05, 0.05, 0.08, 0.01, 0.07, 0.05, 0.02, 0.04, 0.08, 0.09, 0.01, 0.03, 0.1, 0.01, 0.06, 0.02, 0.1, 0.09, 0.08, 0.07, 0.02, 0.1, 0.05, 0.02, 0.03, 0.06, 0.09, 0.08, 0.1, 0.01, 0.07, 0.02, 0.02, 0.07, 0.06, 0.05, 0.08, 0.03, 0.08, 0.01, 0.08, 0.01, 0.06, 0.06, 0.09, 0.01, 0.1, 0.05, 0.02, 0.04, 0.06, 0.1, 0.08, 0.03, 0.04, 0.07, 0.01, 0.1, 0.05, 0.1, 0.06, 0.1, 0.08, 0.07, 0.06, 0.03, 0.04, 0.05, 0.02, 0.08, 0.05, 0.02, 0.03, 0.01, 0.08, 0.01, 0.01, 0.03, 0.06, 0.02, 0.08, 0.09, 0.02, 0.03, 0.07, 0.02, 0.02, 0.08, 0.08, 0.05, 0.02, 0.01, 0.09, 0.04, 0.08, 0.07, 0.08, 0.05, 0.1, 0.1, 0.04, 0.04, 0.02, 0.1, 0.08, 0.04, 0.05, 0.04, 0.1, 0.06, 0.02, 0.07, 0.07, 0.04, 0.05, 0.01, 0.1, 0.02, 0.04, 0.01, 0.03, 0.02, 0.08, 0.05, 0.1, 0.09, 0.08, 0.03, 0.07, 0.01, 0.01, 0.04, 0.07, 0.06, 0.07, 0.03, 0.01, 0.05, 0.02, 0.06, 0.08, 0.02, 0.09, 0.03, 0.06, 0.08, 0.08, 0.01, 0.03, 0.02, 0.05, 0.02, 0.06, 0.03, 0.1, 0.01, 0.09, 0.07, 0.01, 0.08, 0.09, 0.09, 0.02, 0.01, 0.05, 0.05, 0.09, 0.06, 0.04, 0.06, 0.03, 0.01, 0.1, 0.1, 0.01, 0.06, 0.06, 0.1, 0.1, 0.1, 0.01, 0.06, 0.09, 0.04, 0.08, 0.09, 0.01, 0.03, 0.01, 0.1, 0.04, 0.06, 0.08, 0.1, 0.01, 0.1, 0.06, 0.04, 0.05, 0.04, 0.01, 0.09, 0.07, 0.04, 0.05, 0.01, 0.09, 0.01, 0.05, 0.09, 0.07, 0.05, 0.02, 0.01, 0.08, 0.09, 0.02, 0.03, 0.03, 0.06, 0.1, 0.08, 0.05, 0.09, 0.07, 0.06, 0.04, 0.07, 0.01, 0.1, 0.02, 0.03, 0.03, 0.08, 0.02, 0.09, 0.1, 0.06, 0.05, 0.06, 0.05, 0.02, 0.08, 0.08, 0.09, 0.07, 0.03, 0.09, 0.02, 0.06, 0.02, 0.06, 0.1, 0.09, 0.08, 0.04, 0.06, 0.06, 0.1, 0.02, 0.04, 0.02, 0.07, 0.02, 0.08, 0.08, 0.1, 0.09, 0.06, 0.1, 0.08, 0.08, 0.06, 0.06, 0.05, 0.03, 0.04, 0.04, 0.06, 0.08, 0.07, 0.07, 0.05, 0.07, 0.09, 0.05, 0.05, 0.01, 0.04, 0.06, 0.04, 0.04, 0.04, 0.1, 0.04, 0.01, 0.1, 0.06, 0.08, 0.06, 0.1, 0.07, 0.01, 0.04, 0.1, 0.08, 0.08, 0.01, 0.09, 0.1, 0.06, 0.03, 0.04, 0.06, 0.02, 0.03, 0.08, 0.02, 0.07, 0.08, 0.08, 0.09, 0.1, 0.07, 0.08, 0.01, 0.07, 0.06, 0.01, 0.03, 0.02, 0.01, 0.03, 0.1, 0.07, 0.02, 0.02, 0.01, 0.03, 0.04, 0.04, 0.07, 0.05, 0.02, 0.1, 0.08, 0.04, 0.1, 0.01, 0.04, 0.08, 0.08, 0.07, 0.01, 0.03, 0.1, 0.03, 0.05, 0.01, 0.04, 0.03, 0.03, 0.05, 0.1, 0.09, 0.01]
coeffs = pywt.wavedec(data, 'db3', level=6)

print("Wavelet Coefficients:")
for i, coeff in enumerate(coeffs):
    print(f"Level {i} Coefficients (Length {len(coeff)}):")
    print(coeff)

fig, axs = plt.subplots(len(coeffs), 1, figsize=(14, 8))
for i, coeff in enumerate(coeffs):
    axs[i].plot(coeff, label=f'Level {i}')
    axs[i].legend(loc='upper right')

plt.tight_layout()
plt.show()

data = [0.04, 0.08, 0.09, 0.03, 0.1, 0.08, 0.01, 0.06, 0.03, 0.07, 0.1, 0.07, 0.1, 0.05, 0.08, 0.01, 0.06, 0.03, 0.05, 0.05, 0.08, 0.01, 0.07, 0.05, 0.02, 0.04, 0.08, 0.09, 0.01, 0.03, 0.1, 0.01, 0.06, 0.02, 0.1, 0.09, 0.08, 0.07, 0.02, 0.1, 0.05, 0.02, 0.03, 0.06, 0.09, 0.08, 0.1, 0.01, 0.07, 0.02, 0.02, 0.07, 0.06, 0.05, 0.08, 0.03, 0.08, 0.01, 0.08, 0.01, 0.06, 0.06, 0.09, 0.01, 0.1, 0.05, 0.02, 0.04, 0.06, 0.1, 0.08, 0.03, 0.04, 0.07, 0.01, 0.1, 0.05, 0.1, 0.06, 0.1, 0.08, 0.07, 0.06, 0.03, 0.04, 0.05, 0.02, 0.08, 0.05, 0.02, 0.03, 0.01, 0.08, 0.01, 0.01, 0.03, 0.06, 0.02, 0.08, 0.09, 0.02, 0.03, 0.07, 0.02, 0.02, 0.08, 0.08, 0.05, 0.02, 0.01, 0.09, 0.04, 0.08, 0.07, 0.08, 0.05, 0.1, 0.1, 0.04, 0.04, 0.02, 0.1, 0.08, 0.04, 0.05, 0.04, 0.1, 0.06, 0.02, 0.07, 0.07, 0.04, 0.05, 0.01, 0.1, 0.02, 0.04, 0.01, 0.03, 0.02, 0.08, 0.05, 0.1, 0.09, 0.08, 0.03, 0.07, 0.01, 0.01, 0.04, 0.07, 0.06, 0.07, 0.03, 0.01, 0.05, 0.02, 0.06, 0.08, 0.02, 0.09, 0.03, 0.06, 0.08, 0.08, 0.01, 0.03, 0.02, 0.05, 0.02, 0.06, 0.03, 0.1, 0.01, 0.09, 0.07, 0.01, 0.08, 0.09, 0.09, 0.02, 0.01, 0.05, 0.05, 0.09, 0.06, 0.04, 0.06, 0.03, 0.01, 0.1, 0.1, 0.01, 0.06, 0.06, 0.1, 0.1, 0.1, 0.01, 0.06, 0.09, 0.04, 0.08, 0.09, 0.01, 0.03, 0.01, 0.1, 0.04, 0.06, 0.08, 0.1, 0.01, 0.1, 0.06, 0.04, 0.05, 0.04, 0.01, 0.09, 0.07, 0.04, 0.05, 0.01, 0.09, 0.01, 0.05, 0.09, 0.07, 0.05, 0.02, 0.01, 0.08, 0.09, 0.02, 0.03, 0.03, 0.06, 0.1, 0.08, 0.05, 0.09, 0.07, 0.06, 0.04, 0.07, 0.01, 0.1, 0.02, 0.03, 0.03, 0.08, 0.02, 0.09, 0.1, 0.06, 0.05, 0.06, 0.05, 0.02, 0.08, 0.08, 0.09, 0.07, 0.03, 0.09, 0.02, 0.06, 0.02, 0.06, 0.1, 0.09, 0.08, 0.04, 0.06, 0.06, 0.1, 0.02, 0.04, 0.02, 0.07, 0.02, 0.08, 0.08, 0.1, 0.09, 0.06, 0.1, 0.08, 0.08, 0.06, 0.06, 0.05, 0.03, 0.04, 0.04, 0.06, 0.08, 0.07, 0.07, 0.05, 0.07, 0.09, 0.05, 0.05, 0.01, 0.04, 0.06, 0.04, 0.04, 0.04, 0.1, 0.04, 0.01, 0.1, 0.06, 0.08, 0.06, 0.1, 0.07, 0.01, 0.04, 0.1, 0.08, 0.08, 0.01, 0.09, 0.1, 0.06, 0.03, 0.04, 0.06, 0.02, 0.03, 0.08, 0.02, 0.07, 0.08, 0.08, 0.09, 0.1, 0.07, 0.08, 0.01, 0.07, 0.06, 0.01, 0.03, 0.02, 0.01, 0.03, 0.1, 0.07, 0.02, 0.02, 0.01, 0.03, 0.04, 0.04, 0.07, 0.05, 0.02, 0.1, 0.08, 0.04, 0.1, 0.01, 0.04, 0.08, 0.08, 0.07, 0.01, 0.03, 0.1, 0.03, 0.05, 0.01, 0.04, 0.03, 0.03, 0.05, 0.1, 0.09, 0.01]
data_np = np.array(data)

lyap_exp = nolds.lyap_r(data_np, emb_dim=10)
print("Εκτιμώμενη διάσταση Lyapunov:", lyap_exp)

fft_result = np.fft.fft(data)
frequencies = np.fft.fftfreq(len(data))

power = np.abs(fft_result)**2

positive_freqs = frequencies > 0
frequencies = frequencies[positive_freqs]
power = power[positive_freqs]

plt.figure(figsize=(12, 6))
plt.plot(frequencies, power)
plt.title('Power Spectrum')
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.grid(True)
plt.show()

corr_dim = nolds.corr_dim(data_np, emb_dim=10)
print("Εκτιμώμενη διάσταση διασποράς:", corr_dim)

data = [0.04, 0.08, 0.09, 0.03, 0.1, 0.08, 0.01, 0.06, 0.03, 0.07, 0.1, 0.07, 0.1, 0.05, 0.08, 0.01, 0.06, 0.03, 0.05, 0.05, 0.08, 0.01, 0.07, 0.05, 0.02, 0.04, 0.08, 0.09, 0.01, 0.03, 0.1, 0.01, 0.06, 0.02, 0.1, 0.09, 0.08, 0.07, 0.02, 0.1, 0.05, 0.02, 0.03, 0.06, 0.09, 0.08, 0.1, 0.01, 0.07, 0.02, 0.02, 0.07, 0.06, 0.05, 0.08, 0.03, 0.08, 0.01, 0.08, 0.01, 0.06, 0.06, 0.09, 0.01, 0.1, 0.05, 0.02, 0.04, 0.06, 0.1, 0.08, 0.03, 0.04, 0.07, 0.01, 0.1, 0.05, 0.1, 0.06, 0.1, 0.08, 0.07, 0.06, 0.03, 0.04, 0.05, 0.02, 0.08, 0.05, 0.02, 0.03, 0.01, 0.08, 0.01, 0.01, 0.03, 0.06, 0.02, 0.08, 0.09, 0.02, 0.03, 0.07, 0.02, 0.02, 0.08, 0.08, 0.05, 0.02, 0.01, 0.09, 0.04, 0.08, 0.07, 0.08, 0.05, 0.1, 0.1, 0.04, 0.04, 0.02, 0.1, 0.08, 0.04, 0.05, 0.04, 0.1, 0.06, 0.02, 0.07, 0.07, 0.04, 0.05, 0.01, 0.1, 0.02, 0.04, 0.01, 0.03, 0.02, 0.08, 0.05, 0.1, 0.09, 0.08, 0.03, 0.07, 0.01, 0.01, 0.04, 0.07, 0.06, 0.07, 0.03, 0.01, 0.05, 0.02, 0.06, 0.08, 0.02, 0.09, 0.03, 0.06, 0.08, 0.08, 0.01, 0.03, 0.02, 0.05, 0.02, 0.06, 0.03, 0.1, 0.01, 0.09, 0.07, 0.01, 0.08, 0.09, 0.09, 0.02, 0.01, 0.05, 0.05, 0.09, 0.06, 0.04, 0.06, 0.03, 0.01, 0.1, 0.1, 0.01, 0.06, 0.06, 0.1, 0.1, 0.1, 0.01, 0.06, 0.09, 0.04, 0.08, 0.09, 0.01, 0.03, 0.01, 0.1, 0.04, 0.06, 0.08, 0.1, 0.01, 0.1, 0.06, 0.04, 0.05, 0.04, 0.01, 0.09, 0.07, 0.04, 0.05, 0.01, 0.09, 0.01, 0.05, 0.09, 0.07, 0.05, 0.02, 0.01, 0.08, 0.09, 0.02, 0.03, 0.03, 0.06, 0.1, 0.08, 0.05, 0.09, 0.07, 0.06, 0.04, 0.07, 0.01, 0.1, 0.02, 0.03, 0.03, 0.08, 0.02, 0.09, 0.1, 0.06, 0.05, 0.06, 0.05, 0.02, 0.08, 0.08, 0.09, 0.07, 0.03, 0.09, 0.02, 0.06, 0.02, 0.06, 0.1, 0.09, 0.08, 0.04, 0.06, 0.06, 0.1, 0.02, 0.04, 0.02, 0.07, 0.02, 0.08, 0.08, 0.1, 0.09, 0.06, 0.1, 0.08, 0.08, 0.06, 0.06, 0.05, 0.03, 0.04, 0.04, 0.06, 0.08, 0.07, 0.07, 0.05, 0.07, 0.09, 0.05, 0.05, 0.01, 0.04, 0.06, 0.04, 0.04, 0.04, 0.1, 0.04, 0.01, 0.1, 0.06, 0.08, 0.06, 0.1, 0.07, 0.01, 0.04, 0.1, 0.08, 0.08, 0.01, 0.09, 0.1, 0.06, 0.03, 0.04, 0.06, 0.02, 0.03, 0.08, 0.02, 0.07, 0.08, 0.08, 0.09, 0.1, 0.07, 0.08, 0.01, 0.07, 0.06, 0.01, 0.03, 0.02, 0.01, 0.03, 0.1, 0.07, 0.02, 0.02, 0.01, 0.03, 0.04, 0.04, 0.07, 0.05, 0.02, 0.1, 0.08, 0.04, 0.1, 0.01, 0.04, 0.08, 0.08, 0.07, 0.01, 0.03, 0.1, 0.03, 0.05, 0.01, 0.04, 0.03, 0.03, 0.05, 0.1, 0.09, 0.01]

max_lag = 24
results = acorr_ljungbox(data, lags=[i for i in range(1, max_lag + 1)], return_df=True)

min_p_value = results['lb_pvalue'].min()
best_lag = results['lb_pvalue'].idxmin()

print("Αποτελέσματα ελέγχου Ljung-Box:")
print(results)
print("\nΚαλύτερο lag:", best_lag, "με τιμή p:", min_p_value)

